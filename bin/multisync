#!/usr/bin/env ruby

require 'multisync'

require 'optparse'
require 'rainbow/ext/string'
require 'terminal-table'

CATALOG_FILE = File.expand_path '~/.multisync.rb'

unless File.exist? CATALOG_FILE
  require 'fileutils'
  FileUtils.cp File.expand_path('../../sample/multisync.rb', __FILE__), CATALOG_FILE
  puts
  puts "Sample catalog file has been created at #{CATALOG_FILE}."
  puts "Adjust configuration to your needs."
  puts
  exit
end


options = { list: false, show: false, dryrun: false }
parser = OptionParser.new do |o|
  o.banner = "\nRun rsync jobs defined in the catalog file '#{CATALOG_FILE}'.\n\n"+
             "Usage: #{File.basename $0} [options] [SET] [...]\n\n"+
             "       SET selects a section from the catalog (see option -l)\n"+
             "       use / as a follow:\n"+
             "       work/pictures to specify the sync defined in the group work and\n"+
             "       home/pictures to specify the sync defined in the group home\n"+
             "       pictures alone will select both syncs, the one in the group work\n"+
             "       as well as the one in the group home"
  o.separator ''
  o.on('-l', '--list', "List the catalog") do
    options[:list] = true
  end
  o.on('-s', '--show', "Print the commands without executing them") do
    options[:show] = true
  end
  o.on('-n', '--dryrun', "Run rsync in dry-run mode") do
    options[:dryrun] = true
  end
  o.separator ''
end
parser.parse!
sets = ARGV

# List catalog
catalog = Multisync::Catalog.load CATALOG_FILE
if options[:list]
  puts
  catalog.list
  puts
  exit
end

# Runtime handles "normal run", "dry run" and "show only command"
runtime = Multisync::Runtime.new(options)
catalog.select sets do |sync|
  sync.run runtime
end
exit if runtime.results.empty?
puts
exit if options[:show]

# Summarization
table = Terminal::Table.new
table.style = { 
  border_top: false,  border_bottom: false, 
  border_x: '–', border_y: '', border_i: '', 
  padding_left: 0, padding_right: 3,
}
table.headings = %w( Summary Files + - → ∑ ↑ ).zip(%i( left right right right right right right )).map{|v,a| {value: v, alignment: a} } 

runtime.results.each do |result|
  case result[:action]
  when :run
    if result[:status].success?
      # successfull run
      stat = Multisync::RsyncStat.new(result[:stdout]).parse
      table.add_row [
        result[:description],
        *stat.to_a.map{|e| {value: e.color(:green), alignment: :right} }
      ]
    else
      # failed run
      table.add_row [
        result[:description],
        { value: result[:stderr].strip.color(:red), colspan: 6 }
      ]
    end
  when :skip
    # skiped sync
    table.add_row [
      result[:description],
      { value: result[:skip_message].color(:yellow), colspan: 6 }
    ]
  end
end

puts
puts
puts table
puts
