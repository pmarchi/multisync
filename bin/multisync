#!/usr/bin/env ruby

require 'multisync'

require 'optparse'
require 'text/highlight'
String.highlighter = Text::ANSIHighlighter.new

def stats_to_report
  [ 'Number of files',
    'Number of created files',
    'Number of deleted files',
    'Number of regular files transferred',
    'Total file size',
    'Total transferred file size', ]
end

CATALOG_FILE = File.expand_path '~/.multisync.rb'

unless File.exist? CATALOG_FILE
  require 'fileutils'
  FileUtils.cp File.expand_path('../../sample/multisync.rb', __FILE__), CATALOG_FILE
  puts
  puts "Sample catalog file has been created at #{CATALOG_FILE}."
  puts "Adjust configuration to your needs."
  puts
  exit
end


options = { list: false, print: false, dryrun: false }
parser = OptionParser.new do |o|
  o.banner = "\nRun rsync jobs defined in the catalog file '#{CATALOG_FILE}'.\n\n"+
             "Usage: #$0 [options] [SET] [...]\n\n"+
             "       SET selects a section from the catalog (see option -l)\n"+
             "       use / as a follow:\n"+
             "       work/pictures to specify the sync defined in the group work and\n"+
             "       home/pictures to specify the sync defined in the group home\n"+
             "       pictures alone will select both syncs, the one in the group work\n"+
             "       as well as the one in the group home"
  o.separator ''
  o.on('-l', '--list', "List the catalog") do
    options[:list] = true
  end
  o.on('-p', '--print', "Print the commands without executing them") do
    options[:print] = true
  end
  o.on('-n', '--dryrun', "Run rsync in dry-run mode") do
    options[:dryrun] = true
  end
  o.separator ''
end
parser.parse!

catalog = Multisync::Catalog.load CATALOG_FILE
if options[:list]
  puts
  catalog.list
  puts
  exit
end

sets = ARGV
syncs = catalog.run Multisync::Runtime.new(options), sets

puts
exit if options[:print]

puts '_' * 80
syncs.each do |sync|
  puts
  if sync.result.success?
    puts sync.description.bold.green
    puts sync.result.stdout.scan(/(?:#{stats_to_report.join('|')}):.*/)
  else
    puts "#{sync.description} (failed #{sync.result.status.exitstatus})".bold.red
    puts sync.result.stderr
  end
end
puts
